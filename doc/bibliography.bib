@article{1,
author = {Jin, Xianhao and Servant, Francisco},
title = {HybridCISave: A Combined Build and Test Selection Approach in Continuous Integration},
year = {2023},
issue_date = {July 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {32},
number = {4},
issn = {1049-331X},
url = {https://doi.org/10.1145/3576038},
doi = {10.1145/3576038},
abstract = {Continuous Integration (CI) is a popular practice in modern software engineering. Unfortunately, it is also a high-cost practice—Google and Mozilla estimate their CI systems in millions of dollars. To reduce the computational cost in CI, researchers developed approaches to selectively execute builds or tests that are likely to fail (and skip those likely to pass). In this article, we present a novel hybrid technique (HybridCISave) to improve on the limitations of existing techniques: to provide higher cost savings and higher safety. To provide higher cost savings, HybridCISave combines techniques to predict and skip executions of both full builds that are predicted to pass and partial ones (only the tests in them predicted to pass). To provide higher safety, HybridCISave combines the predictions of multiple techniques to obtain stronger certainty before it decides to skip a build or test. We evaluated HybridCISave by comparing its effectiveness with the existing build selection techniques over 100 projects and found that it provided higher cost savings at the highest safety. We also evaluated each design decision in HybridCISave and found that skipping both full and partial builds increased its cost savings and that combining multiple test selection techniques made it safer.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {may},
articleno = {93},
numpages = {39},
keywords = {test selection, build selection, Continuous Integration, Software maintenance}
}

@INPROCEEDINGS{2,
  author={Jin, Xianhao and Servant, Francisco},
  booktitle={2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE)}, 
  title={A Cost-efficient Approach to Building in Continuous Integration}, 
  year={2020},
  volume={},
  number={},
  pages={13-25},
  keywords={Computer bugs;Buildings;Internet;Delays;Software engineering;continuous integration;build prediction;maintenance cost},
  doi={}}

@INPROCEEDINGS{3,
  author={Jin, Xianhao and Servant, Francisco},
  booktitle={2021 IEEE/ACM 43rd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)}, 
  title={CIBench: A Dataset and Collection of Techniques for Build and Test Selection and Prioritization in Continuous Integration}, 
  year={2021},
  volume={},
  number={},
  pages={166-167},
  keywords={Buildings;Tools;Internet;Software engineering;Software development management;continuous integration;software maintenance;empirical software engineering},
  doi={10.1109/ICSE-Companion52605.2021.00070}}

@article{4,
author = {Jin, Xianhao and Servant, Francisco},
title = {Which builds are really safe to skip? Maximizing failure observation for build selection in continuous integration},
year = {2022},
issue_date = {Jun 2022},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {188},
number = {C},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2022.111292},
doi = {10.1016/j.jss.2022.111292},
journal = {J. Syst. Softw.},
month = {jun},
numpages = {18},
keywords = {Maintenance cost, Safety, Build prediction, Continuous integration}
}

@article{5,
title = {Predicting continuous integration build failures using evolutionary search},
journal = {Information and Software Technology},
volume = {128},
pages = {106392},
year = {2020},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2020.106392},
url = {https://www.sciencedirect.com/science/article/pii/S0950584920301579},
author = {Islem Saidani and Ali Ouni and Moataz Chouchen and Mohamed Wiem Mkaouer},
keywords = {Continuous integration, Build prediction, Multi-Objective optimization, Search-Based software engineering, Machine learning},
abstract = {Context: Continuous Integration (CI) is a common practice in modern software development and it is increasingly adopted in the open-source as well as the software industry markets. CI aims at supporting developers in integrating code changes constantly and quickly through an automated build process. However, in such context, the build process is typically time and resource-consuming which requires a high maintenance effort to avoid build failure. Objective: The goal of this study is to introduce an automated approach to cut the expenses of CI build time and provide support tools to developers by predicting the CI build outcome. Method: In this paper, we address problem of CI build failure by introducing a novel search-based approach based on Multi-Objective Genetic Programming (MOGP) to build a CI build failure prediction model. Our approach aims at finding the best combination of CI built features and their appropriate threshold values, based on two conflicting objective functions to deal with both failed and passed builds. Results: We evaluated our approach on a benchmark of 56,019 builds from 10 large-scale and long-lived software projects that use the Travis CI build system. The statistical results reveal that our approach outperforms the state-of-the-art techniques based on machine learning by providing a better balance between both failed and passed builds. Furthermore, we use the generated prediction rules to investigate which factors impact the CI build results, and found that features related to (1) specific statistics about the project such as team size, (2) last build information in the current build and (3) the types of changed files are the most influential to indicate the potential failure of a given build. Conclusion: This paper proposes a multi-objective search-based approach for the problem of CI build failure prediction. The performances of the models developed using our MOGP approach were statistically better than models developed using machine learning techniques. The experimental results show that our approach can effectively reduce both false negative rate and false positive rate of CI build failures in highly imbalanced datasets.}
}

@inproceedings{6,
author = {Chen, Bihuan and Chen, Linlin and Zhang, Chen and Peng, Xin},
title = {BuildFast: history-aware build outcome prediction for fast feedback and reduced cost in continuous integration},
year = {2021},
isbn = {9781450367684},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3324884.3416616},
doi = {10.1145/3324884.3416616},
abstract = {Long build times in continuous integration (CI) can greatly increase the cost in human and computing resources, and thus become a common barrier faced by software organizations adopting CI. Build outcome prediction has been proposed as one of the remedies to reduce such cost. However, the state-of-the-art approaches have a poor prediction performance for failed builds, and are not designed for practical usage scenarios. To address the problems, we first conduct an empirical study on 2,590,917 builds to characterize build times in real-world projects, and a survey with 75 developers to understand their perceptions about build outcome prediction. Then, motivated by our study and survey results, we propose a new history-aware approach, named BuildFast, to predict CI build outcomes cost-efficiently and practically. We develop multiple failure-specific features from closely related historical builds via analyzing build logs and changed files, and propose an adaptive prediction model to switch between two models based on the build outcome of the previous build. We investigate a practical online usage scenario of BuildFast, where builds are predicted in chronological order, and measure the benefit from correct predictions and the cost from incorrect predictions. Our experiments on 20 projects have shown that BuildFast improved the state-of-the-art by 47.5\% in F1-score for failed builds.},
booktitle = {Proceedings of the 35th IEEE/ACM International Conference on Automated Software Engineering},
pages = {42–53},
numpages = {12},
keywords = {failure prediction, continuous integration, build failures},
location = {Virtual Event, Australia},
series = {ASE '20}
}

@inproceedings{7,
author = {Hassan, Foyzul and Wang, Xiaoyin},
title = {Change-aware build prediction model for stall avoidance in continuous integration},
year = {2017},
isbn = {9781509040391},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ESEM.2017.23},
doi = {10.1109/ESEM.2017.23},
abstract = {Continuous Integration(CI) is a widely used development practice where developers integrate their work after submitting code changes at central repository. CI servers usually monitor central repository for code change submission and automatically build software with changed code, perform unit testing, integration testing and provide test summary report. If build or test fails developers fix those issues and submit the code changes. Continuous submission of code modification by developers and build latency time creates stalls at CI server build pipeline and hence developers have to wait long time to get build outcome. In this paper, we proposed build prediction model that uses TravisTorrent data set with build error log clustering and AST level code change modification data to predict whether a build will be successful or not without attempting actual build so that developer can get early build outcome result. With the proposed model we can predict build outcome with an average F-Measure over 87\% on all three build systems (Ant, Maven, Gradle) under the cross-project prediction scenario.},
booktitle = {Proceedings of the 11th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
pages = {157–162},
numpages = {6},
keywords = {continuous integration, software build outcome prediction},
location = {Markham, Ontario, Canada},
series = {ESEM '17}
}

@article{8,
author = {Elazhary, Omar and Werner, Colin and Li, Ze and Lowlind, Derek and Ernst, Neil and Storey, Margaret-Anne},
year = {2021},
month = {03},
pages = {1-1},
title = {Uncovering the Benefits and Challenges of Continuous Integration Practices},
volume = {PP},
journal = {IEEE Transactions on Software Engineering},
doi = {10.1109/TSE.2021.3064953}
}

@article{9,
author = {Rostami Mazrae, Pooya and Mens, Tom and Golzadeh, Mehdi and Decan, Alexandre},
title = {On the usage, co-usage and migration of CI/CD tools: A qualitative analysis},
year = {2023},
issue_date = {Mar 2023},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {28},
number = {2},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-022-10285-5},
doi = {10.1007/s10664-022-10285-5},
abstract = {Continuous integration, delivery and deployment (CI/CD) is used to support the collaborative software development process. CI/CD tools automate a wide range of activities in the development workflow such as testing, linting, updating dependencies, creating and deploying releases, and so on. Previous quantitative studies have revealed important changes in the landscape of CI/CD usage, with the increasing popularity of cloud-based services, and many software projects migrating to other CI/CD tools. In order to understand the reasons behind these changes in CI/CD usage, this paper presents a qualitative study based on in-depth interviews with 22 experienced software practitioners reporting on their usage, co-usage and migration of 31 different CI/CD tools. Following an inductive and deductive coding process, we analyse the interviews and found a high amount of competition between CI/CD tools. We observe multiple reasons for co-using different CI/CD tools within the same project, and we identify the main reasons and detractors for migrating to different alternatives. Among all reported migrations, we observe a clear trend of migrations away from Travis and migrations towards GitHub Actions and we identify the main reasons behind them.},
journal = {Empirical Softw. Engg.},
month = {mar},
numpages = {45},
keywords = {Empirical software engineering, Qualitative analysis, Workflow automation, Collaborative software development, CI/CD}
}

@inproceedings{10,
author = {Hilton, Michael and Tunnell, Timothy and Huang, Kai and Marinov, Darko and Dig, Danny},
title = {Usage, costs, and benefits of continuous integration in open-source projects},
year = {2016},
isbn = {9781450338455},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2970276.2970358},
doi = {10.1145/2970276.2970358},
abstract = {Continuous integration (CI) systems automate the compilation, building, and testing of software. Despite CI rising as a big success story in automated software engineering, it has received almost no attention from the research community. For example, how widely is CI used in practice, and what are some costs and benefits associated with CI? Without answering such questions, developers, tool builders, and researchers make decisions based on folklore instead of data. In this paper, we use three complementary methods to study the usage of CI in open-source projects. To understand which CI systems developers use, we analyzed 34,544 open-source projects from GitHub. To understand how developers use CI, we analyzed 1,529,291 builds from the most commonly used CI system. To understand why projects use or do not use CI, we surveyed 442 developers. With this data, we answered several key questions related to the usage, costs, and benefits of CI. Among our results, we show evidence that supports the claim that CI helps projects release more often, that CI is widely adopted by the most popular projects, as well as finding that the overall percentage of projects using CI continues to grow, making it important and timely to focus more research on CI.},
booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
pages = {426–437},
numpages = {12},
keywords = {mining software repositories, continuous integration},
location = {Singapore, Singapore},
series = {ASE '16}
}

@inproceedings{11,
author = {Herzig, Kim and Greiler, Michaela and Czerwonka, Jacek and Murphy, Brendan},
title = {The art of testing less without sacrificing quality},
year = {2015},
isbn = {9781479919345},
publisher = {IEEE Press},
abstract = {Testing is a key element of software development processes for the management and assessment of product quality. In most development environments, the software engineers are responsible for ensuring the functional correctness of code. However, for large complex software products, there is an additional need to check that changes do not negatively impact other parts of the software and they comply with system constraints such as backward compatibility, performance, security etc. Ensuring these system constraints may require complex verification infrastructure and test procedures. Although such tests are time consuming and expensive and rarely find defects they act as an insurance process to ensure the software is compliant. However, long lasting tests increasingly conflict with strategic aims to shorten release cycles. To decrease production costs and to improve development agility, we created a generic test selection strategy called THEO that accelerates test processes without sacrificing product quality. THEO is based on a cost model, which dynamically skips tests when the expected cost of running the test exceeds the expected cost of removing it. We replayed past development periods of three major Microsoft products resulting in a reduction of 50\% of test executions, saving millions of dollars per year, while maintaining product quality.},
booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 1},
pages = {483–493},
numpages = {11},
keywords = {test improvement, measurement, cost estimation},
location = {Florence, Italy},
series = {ICSE '15}
}

@online{12,
  author    = {Martin Fowler and Matt Foemmel},
  title     = {Continuous Integration},
  year      = {2006},
  url       = {https://tinyurl.com/ycbl2uhj},
  note      = {[Online; accessed 2-Aug-2024]}
}

@inproceedings{13,
author = {Rausch, Thomas and Hummer, Waldemar and Leitner, Philipp and Schulte, Stefan},
title = {An empirical analysis of build failures in the continuous integration workflows of Java-based open-source software},
year = {2017},
isbn = {9781538615447},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MSR.2017.54},
doi = {10.1109/MSR.2017.54},
abstract = {Continuous Integration (CI) has become a common practice in both industrial and open-source software development. While CI has evidently improved aspects of the software development process, errors during CI builds pose a threat to development efficiency. As an increasing amount of time goes into fixing such errors, failing builds can significantly impair the development process and become very costly. We perform an in-depth analysis of build failures in CI environments. Our approach links repository commits to data of corresponding CI builds. Using data from 14 open-source Java projects, we first identify 14 common error categories. Besides test failures, which are by far the most common error category (up to >80\% per project), we also identify noisy build data, e.g., induced by transient Git interaction errors, or general infrastructure flakiness. Second, we analyze which factors impact the build results, taking into account general process and specific CI metrics. Our results indicate that process metrics have a significant impact on the build outcome in 8 of the 14 projects on average, but the strongest influencing factor across all projects is overall stability in the recent build history. For 10 projects, more than 50\% (up to 80\%) of all failed builds follow a previous build failure. Moreover, the fail ratio of the last k=10 builds has a significant impact on build results for all projects in our dataset.},
booktitle = {Proceedings of the 14th International Conference on Mining Software Repositories},
pages = {345–355},
numpages = {11},
keywords = {build errors, continuous integration, correlation analysis, mining software repositories},
location = {Buenos Aires, Argentina},
series = {MSR '17}
}

@inproceedings{14,
author = {Saidani, Islem and Ouni, Ali and Chouchen, Moataz and Mkaouer, Mohamed Wiem},
title = {BF-detector: an automated tool for CI build failure detection},
year = {2021},
isbn = {9781450385626},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3468264.3473115},
doi = {10.1145/3468264.3473115},
abstract = {Continuous Integration (CI) aims at supporting developers in inte-grating code changes quickly through automated building. How-ever, there is a consensus that CI build failure is a major barrierthat developers face, which prevents them from proceeding furtherwith development. In this paper, we introduceBF-Detector, anautomated tool to detect CI build failure. Based on the adaptationof Non-dominated Sorting Genetic Algorithm (NSGA-II), our toolaims at finding the best prediction rules based on two conflictingobjective functions to deal with both minority and majority classes.We evaluated the effectiveness of our tool on a benchmark of 56,019CI builds. The results reveal that our technique outperforms state-of-the-art approaches by providing a better balance between bothfailed and passed builds.BF-Detectortool is publicly available,with a demo video, at: https://github.com/stilab-ets/BF-Detector.},
booktitle = {Proceedings of the 29th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1530–1534},
numpages = {5},
keywords = {Search-Based Software Engineering, Multi-Objective Optimization, Machine Learning, Continuous Integration, Build Prediction},
location = {Athens, Greece},
series = {ESEC/FSE 2021}
}

@article{15,
author = {Saidani, Islem and Ouni, Ali and Mkaouer, Mohamed Wiem},
title = {Improving the prediction of continuous integration build failures using deep learning},
year = {2022},
issue_date = {May 2022},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {29},
number = {1},
issn = {0928-8910},
url = {https://doi.org/10.1007/s10515-021-00319-5},
doi = {10.1007/s10515-021-00319-5},
abstract = {Continuous Integration (CI) aims at supporting developers in integrating code changes constantly and quickly through an automated build process. However, the build process is typically time and resource-consuming as running failed builds can take hours until discovering the breakage; which may cause disruptions in the development process and delays in the product release dates. Hence, preemptively detecting when a software state is most likely to trigger a failure during the build is of crucial importance for developers. Accurate build failures prediction techniques can cut the expenses of CI build cost by early predicting its potential failures. However, developing accurate prediction models is a challenging task as it requires learning long- and short-term dependencies in the historical CI build data as well as extensive feature engineering to derive informative features to learn from. In this paper, we introduce DL-CIBuild a novel approach that uses Long Short-Term Memory (LSTM)-based Recurrent Neural Networks (RNN) to construct prediction models for CI build outcome prediction. The problem is comprised of a single series of CI build outcomes and a model is required to learn from the series of past observations to predict the next CI build outcome in the sequence. In addition, we tailor Genetic Algorithm (GA) to tune the hyper-parameters for our LSTM model. We evaluate our approach and investigate the performance of both cross-project and online prediction scenarios on a benchmark of 91,330 CI builds from 10 large and long-lived software projects that use the Travis CI build system. The statistical analysis of the obtained results shows that the LSTM-based model outperforms traditional Machine Learning (ML) models with both online and cross-project validations. DL-CIBuild has shown also a less sensitivity to the training set size and an effective robustness to the concept drift. Additionally, by considering several Hyper-Parameter Optimization (HPO) methods as baseline for GA, we demonstrate that the latter performs the best},
journal = {Automated Software Engg.},
month = {may},
numpages = {61},
keywords = {Continuous integration, Build prediction, Travis CI, Genetic algorithm, Long short term memory, Machine learning, Hyper-parameters optimization, Concept drift}
}

@inproceedings{16,
author = {Islam, Md Rakibul and Zibran, Minhaz F.},
title = {Insights into continuous integration build failures},
year = {2017},
isbn = {9781538615447},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MSR.2017.30},
doi = {10.1109/MSR.2017.30},
abstract = {Continuous integration is prevalently used in modern software engineering to build software systems automatically. Broken builds hinder developers' work and delay project progress. We must identify the factors causing build failures.This paper presents a large empirical study to identify the factors such as, complexity of a task, build strategy and contribution models (i.e., push and pull request), and projects level attributes (i.e., sizes of projects and teams), which potentially have impacts on the build results. We have studied 3.6 million builds over 1,090 open-source projects. The derived results add to our understanding of the role of those factors on build results, which can be used in minimizing build failures.},
booktitle = {Proceedings of the 14th International Conference on Mining Software Repositories},
pages = {467–470},
numpages = {4},
location = {Buenos Aires, Argentina},
series = {MSR '17}
}

@inproceedings{17,
author = {Hong, Yang and Tantithamthavorn, Chakkrit and Pasuksmit, Jirat and Thongtanunam, Patanamon and Friedman, Arik and Zhao, Xing and Krasikov, Anton},
title = {Practitioners’ Challenges and Perceptions of CI Build Failure Predictions at Atlassian},
year = {2024},
isbn = {9798400706585},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3663529.3663856},
doi = {10.1145/3663529.3663856},
abstract = {Continuous Integration (CI) build failures could significantly impact the software development process and teams, such as delaying the release of new features and reducing developers' productivity. In this work, we report on an empirical study that investigates CI build failures throughout product development at Atlassian. Our quantitative analysis found that the repository dimension is the key factor influencing CI build failures. In addition, our qualitative survey revealed that Atlassian developers perceive CI build failures as challenging issues in practice. Furthermore, we found that the CI build prediction can not only provide proactive insight into CI build failures but also facilitate the team's decision-making. Our study sheds light on the challenges and expectations involved in integrating CI build prediction tools into the Bitbucket environment, providing valuable insights for enhancing CI processes.},
booktitle = {Companion Proceedings of the 32nd ACM International Conference on the Foundations of Software Engineering},
pages = {370–381},
numpages = {12},
keywords = {CI Build Failure, CI/CD, Continuous Integration, DevOps},
location = {Porto de Galinhas, Brazil},
series = {FSE 2024}
}

@article{18,
author = {Klotins, Eriks and Gorschek, Tony and Sundelin, Katarina and Falk, Erik},
title = {Towards cost-benefit evaluation for continuous software engineering activities},
year = {2022},
issue_date = {Nov 2022},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {27},
number = {6},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-022-10191-w},
doi = {10.1007/s10664-022-10191-w},
journal = {Empirical Softw. Engg.},
month = {nov},
numpages = {40},
keywords = {Cost-benefit analysis, Continuous Software Engineering, Continuous Delivery, Continuous Integration}
}

@ARTICLE{19,
  author={Liu, Bohan and Zhang, He and Ma, Weigang and Li, Gongyuan and Li, Shanshan and Shen, Haifeng},
  journal={IEEE Transactions on Software Engineering}, 
  title={The Why, When, What, and How About Predictive Continuous Integration: A Simulation-Based Investigation}, 
  year={2023},
  volume={49},
  number={12},
  pages={5223-5249},
  keywords={Software;Costs;Servers;Testing;Machine learning;Codes;Surveys;Continuous integration;machine learning;software process simulation;discrete-event simulation},
  doi={10.1109/TSE.2023.3330510}}

@online{20,
  title     = {GitHub REST API documentation},
  year      = {2008},
  url       = {https://docs.github.com/en/rest?apiVersion=2022-11-28},
  note      = {[Online; accessed 4-Sep-2024]}
}

@article{21,
  author = {Śliwerski, Jacek and Zimmermann, Thomas and Zeller, Andreas},
  title = {When do changes induce fixes?},
  year = {2005},
  issue_date = {July 2005},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {30},
  number = {4},
  issn = {0163-5948},
  url = {https://doi.org/10.1145/1082983.1083147},
  doi = {10.1145/1082983.1083147},
  abstract = {As a software system evolves, programmers make changes that sometimes cause problems. We analyze CVS archives for fix-inducing changes---changes that lead to problems, indicated by fixes. We show how to automatically locate fix-inducing changes by linking a version archive (such as CVS) to a bug database (such as BUGZILLA). In a first investigation of the MOZILLA and ECLIPSE history, it turns out that fix-inducing changes show distinct patterns with respect to their size and the day of week they were applied.},
  journal = {SIGSOFT Softw. Eng. Notes},
  month = {may},
  pages = {1–5},
  numpages = {5}
}
